@namespace("emom.1") // EMOM = "Encrypted Msgpack Over Msgpack"
protocol ae {        // AE   = "Authenticated Encryption"

  enum MsgType {
    CALL_0,
    REPLY_1,
    NOTIFY_2
  }

  // We use abbreviations here extensively to save bandwidth

  record AuthEnc {
    bytes e; // encrypted data
    Seqno n; // nonce bottom 64 bits (various monotonically over all types)
    Seqno r; // non-zero if using a server-ratched key; refers to ServerRatchet.i
  }

  record ServerRatchet {
    int i; // the ID of the server key in the potential sequence
    KID k; // server is updating to a one-time ephemeral key
  }

  @typedef("bytes") record KID    {}
  @typedef("bytes") record UID    {}
  @typedef("long")  record Time   {}
  @typedef("long")  record KeyGen {}
  @typedef("long")  record Seqno  {}

  record Handshake {
    KID    k; // user ephemeral KID
    KeyGen s; // server KID generation number
    int    v; // version of the entire scheme
  }

  // Encrypt this structure and insert it into the `e` field of the AuthEnc structure
  // above.
  record RequestPlaintext {
    bytes                           a; // arg, msgpacked
    union { null, SignedAuthToken } f; // "first"; only sent on first payload
    string                          n; // method name
    union { null, Seqno }           s; // seqno; non-null for calls; null for notifies
  }

  // Encrypt this structure and insert it into the `e` field of the AuthEnc structure
  // above.
  record ResponsePlaintext {
    bytes e; // error, msgpacked
    bytes r; // reply, msgpacked
    Seqno s; // the seqno that the caller specified; must match to detect tampering
  }

  record AuthToken {
    Time c; // creation time, in milliseconds from the epoch (for purge of server replay cache)
    KID  d; // The KID of the signing (device) key
    KID  k; // user ephemeral KID
    UID  u; // UID the auth token is for
  }

  record AuthTokenExported {
    Time c; // creation time, in milliseconds from the epoch (for purge of server replay cache)
    KID  d; // The KID of the signing (device) key
    UID  u; // UID the auth token is for
  }

  record SignedAuthToken {
    AuthTokenExported t; // the auth token parts
    bytes             s; // the EdDSA signature of the msgpack of the AuthToken
  }

  record Arg {
    AuthEnc                   a; // AuthEnc of a RequestPlaintext
    union { null, Handshake } h; // handshake, non-null only on first message
  }

  record Res {
    AuthEnc                a; // AuthEnc of a ResponsePlaintext
    union { null, AuthEnc} r; // optional server ratchet
  }

  // (call or notify) an RPC with method name name, with msgpack'ed args; reply with msgpckaged bytes.
  //
  // c = "call"
  // n = "notify"
  Res c(Arg a);
  void n(Arg a) oneway;
}
